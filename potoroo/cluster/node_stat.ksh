#
# ======================================================================== v1.0/0a157 
#                                                         
#       This software is part of the AT&T Ningaui distribution 
#	
#       Copyright (c) 2001-2009 by AT&T Intellectual Property. All rights reserved
#	AT&T and the AT&T logo are trademarks of AT&T Intellectual Property.
#	
#       Ningaui software is licensed under the Common Public
#       License, Version 1.0  by AT&T Intellectual Property.
#                                                                      
#       A copy of the License is available at    
#       http://www.opensource.org/licenses/cpl1.0.txt             
#                                                                      
#       Information and Software Systems Research               
#       AT&T Labs 
#       Florham Park, NJ                            
#	
#	Send questions, comments via email to ningaui_support@research.att.com.
#	
#                                                                      
# ======================================================================== 0a229


# Mnemonic:	ng_node_stats
# Abstract:	collect some stats about the node and send to a central point in the 
#		cluster. This is now safe for execution on satellite nodes and thus
#		host_stat.ksh is deprecated.
#
#		This now collects some additional stats and writes them to the master
#		log. This information includes repmgr df info. 
#
#		Yes Virginia, in addition to there being a jolly fellow who flies round
#		the world in an open sleigh, the information collected/generated by 
#		this script IS used.  There have been a number of times where it has
#		been believed that the information collected by this, one of the first
#		true ningaui scripts, was no longer used/needed.  
#		
# Date:		February 2001
# Author:	Andrew Hume
# ---------------------------------------------------------------------------------
CARTULARY=${NG_CARTULARY:-$NG_ROOT/cartulary}     # get standard configuration file
. $CARTULARY

STDFUN=${NG_STDFUN:-$NG_ROOT/lib/stdfun}  # get standard functions
. $STDFUN



# -----------------------------------------------------------------------------------

# cat/tail without error messages if file is not there
function show_file
{
	if [[ -r $1 ]]
	then
		cat $1
	fi
}

function tail_file
{
	typeset opts=""

	while [[ $1 = -* ]]		# gather opts like -1
	do
		opts="$opts$1 "
		shift
	done

	if [[ -r $1 ]]
	then
		tail $opts $1
	fi
}

# assume command file [file...]
# execute command only if all files are readable
function try 
{
	typeset cmd="$1"
	typeset f=""
	shift

	for f in "$*"
	do
		if [[ ! -r $f ]]
		then
			return 1
		fi
	done

	$cmd "$@"
}

# write stats to the log about repmgr usage
function rm_stats
{

	if amIreally root
	then
		return
	fi

	if ng_test_nattr Steward
	then
		ng_rm_df|awk '
		NF < 2 { next; }
		/Node/ { next; } 
		{
			d[i+0]=$1 "=" $NF; i++
		} 
	
		END {
			for( x = 0; x < i; x++ )
				printf( "%s ", d[x] ); 
			printf( "\n" )
		}' | read data
	
		ng_log $PRI_INFO $argv0 "rmdf: ${data//%/}"
	fi
}


# -----------------------------------------------------------------------------------
ustring="[-n] [-v]"
send_data=1

while [[ $1 = -* ]]
do
	case $1 in 
		-n)	send_data=0;;

		-v)	verbose=1;;
		--man)	show_man; cleanup 1;;
		-\?)	usage; cleanup 1;;
		-*)	error_msg "unrecognised option: $1"
			usage;
			cleanup 1
			;;
	esac

	shift
done


if ng_goaway -c $argv0
then
	log_msg "found goaway file; not executing"
	cleanup 0
fi

if ! cd ${TMP:-TMP_not_defined}
then
	log_msg "abort: cannot change to ${TMP:-TMP_not_defined}"
	cleanup 1
fi

host=`ng_sysname -s`
ng_uname -a |read type junk

if [[ ! -d $host ]]
then
	if ! mkdir $host 
	then
		log_msg "abort: cannot make directory $TMP/$host"
		cleanup 1
	fi
fi

(
	echo '= scsi'
		show_file /proc/scsi/scsi
	echo '='

	echo '= ide'
		for i in /proc/ide/hd?
		do
			if [[ -d $i ]]
			then
				cd $i
				echo "${i##*/} `tr ' ' '_' < media` `tr ' ' '_' <  model`"
			fi
		done
	echo '='

	echo '= config'
		show_file $NG_ROOT/site/config
	echo '='

	echo '= cpu'
		show_file /proc/cpuinfo
	echo '='

	echo '= uptime'
		uptime
	echo '='

	echo '= io'
		tail_file -1 $TMP/dm.stats
	echo '='

	echo '= family'
		echo "cluster	$NG_CLUSTER"
		echo "jobber	$srv_Jobber"
		echo "filer	$srv_Filer"
		echo "filerbt	$srv_Filerbt"
		echo "steward	$srv_Steward"
		echo "netif	$srv_Netif"
		echo "catalogue	$srv_Catalogue"
	echo '='

	echo '= df'
		ng_df
	echo '='
		echo '= fstab'
		show_file /etc/fstab
	echo '='

	echo '= partition'
		case $type in 
			Linux)
				for i in a b c d e f g h i j k l m	# this should be more than there are
				do
					try "fdisk -l" /dev/sd$i
				done
				;;

			Free*)
				for i in 0 1 2 3 4 5 6 7 8 
				do
					try "fdisk -s" /dev/ad$i
				done 
				;;

			*)	;;
		esac	
	echo '='

	echo '= networking'
		ifconfig -a
	echo '='

	echo '= woomera'
		# bloody tac complains about broken pipe with head -1; redirect its error to bucket
		tac $NG_ROOT/site/log/master 2>/dev/null | grep " `ng_sysname` .*heartb" | head -1
	echo '='

	echo '= ps'
		ng_ps 
	echo '='

	echo '= clock'
		if [[ -n $REFCLOCK_HOST ]]
		then
			ntpdate -q ${REFCLOCK_HOST:-foo}
		fi
	echo '='

	echo '= install'
		tail_file -20 $NG_ROOT/site/pkg_hist 
	echo '='
) > $TMP/$host/devdetails

if [[ -f /var/log/messages ]]
then
	mfile=/var/log/messages
else
	if [[ -f /var/log/system.log ]]
	then
		mfile=/var/log/system.log		# bloody macs
	else
		if [[ -f /var/log/syslog ]]
		then
			mfile=/var/log/syslog
		else
			mfile=/dev/null	
		fi
	fi
fi
gre -v "Temperature|Running in modulated clock mode" $mfile |tail -5000 > $TMP/$host/messages	

cd $TMP				 # ensure that we are back in TMP
tarf=$TMP/$host.stats
log_msg "creating tar file: $tarf.t"	# create file to *.t to prevent overlay if we are srv_Stats node
tar -cf $tarf.t $host

if (( $send_data < 1 ))
then
	mv $tarf.t $TMP/ng_stats.$USER.tar
	log_msg "kept data (not sent) $TMP/ng_stats.$USER.tar"
	rm -fr $TMP/$host $tarf.ll
	cleanup 0
fi

# ----- collect information that is written to the master log; now so if send fails (aborts) we still get  --------------------
rm_stats		# stats about repmgr filesystem usage


log_msg "$(ls -al $tarf.t)"
if [[ -n $srv_Stats ]]
then
	dnode=$srv_Stats							# destination node 

	rtmp=$( ng_rcmd ${dnode:-no_stats_node} ng_wrapper -e TMP )		# must get their setting of TMP
	if [[ -z $rtmp ]]
	then
		log_msg "abort: cannot determine TMP on ${dnode:-no_stats_node}"
		cleanup 1
	fi

	rtarf=$rtmp/${tarf##*/}		# landing spot for ccp to the remote collection node

	verbose "sending: $tarf.t -> $dnode:$rtarf"
	if ng_ccp -s -d $rtarf ${dnode:-no_stats_node} $tarf.t 2> /dev/null
	then
		verbose "scheduling receive job on $dnode: ng_rcv_node_stat"
		ng_wreq -s ${dnode:-no_stats_node} "job: RCV_STAT cmd ng_rcv_node_stat $rtarf"
	else
		log_msg "ccp $tarf.t to $dnode:$rtarf failed"
		cleanup 1
	fi
	
	# done myself; do i need to do others
	if [[ ${dnode:-no_stats_dnode} == $host ]]			# if we are the central collection point
	then
		sleep 30		# let above job run
		cd $NG_ROOT/site/stats/nodes
		tar -cf $tarf.ll $(ng_members) 2>/dev/null		# allow this to fail sliently as tar complains about things that are not probs
		if [[ -f $tarf.ll ]]
		then
			for i in $NG_STATS_CC				# for all nodes that collect stats on all clusters
			do
				rtmp=$( ng_rcmd $i ng_wrapper -e TMP )
				if [[ -n $rtmp ]]
				then
					rtarf=$rtmp/${tarf##*/}.l
					verbose "sending all stats for this cluster to central collection node: $i:$rtarf"
					ng_ccp -s -d $rtarf $i $tarf.ll 2> /dev/null
					ng_wreq -s $i "job: RCV_STAT cmd $NG_ROOT/bin/ng_rcv_node_stat $rtarf xx"
				else
					log_msg "nodes file not sent: unable to dtermine TMP on $i (central collection node)"
				fi
			done
		fi
	fi
else
	log_msg "cannot find srv_Stats pinkpages variable; no data sent"
fi

rm -fr $tarf.t $TMP/$host $tarf.ll



cleanup 0


#---------- SCD: Self Contained Documentation ------------------- 
&scd_start
&doc_title(ng_node_stat:Collect Node Information)

&space
&synop	ng_node_stat [-v]

&space
&desc	&This collects various pieces of information about the current node,
	bundles it into a tar file, and sends the tar file to a central node
	for storage and/or analysis. Information is gathered in the directory
	&lit($TMP/node) where &ital(node) is the node name.  The contents of 
	the directory are:
&space
&begterms
&term	devdetails : Device type information. 
&space
&term	messages : The last few thousand lines of the system messages file. 
&endterms

&space
	Once the stats are gahtered and sent to the central cluster node, a 
	job is scheduled with &lit(ng_woomera) on the collection node to 
	'unpack' the tar file that was sent. 

&space
	The central node in the cluster is the node defined by the &lit(srv_Stats)
	pinkpages variable. If the srv_Stats variable is not defined, then an error 
	message is generated and the script exits.
	
&space
	If &this determines that it is running on the collection node for the cluster, 
	it will gather all of the directories that have been received from round 
	the cluster and send them as a single tar file to the node(s) defined by the 
	pinkpages variable NG_STATS_CC.

&space
&opts	The following options are recognised by &this when placed on the command line:
&begterms
&term	-v : Verbose mode; might make the script chat more to the standard error device. 
&endterms


&space
&parms	No commnad line parameters are expected.

&space
&exit	An exit code of zero indicates that &this was able to create the stats tar file
	and to successfully send it to the collection host. 

&space
&see	ng_rcv_node_stats.ksh

&space
&mods
&owner(Scott Daniels)
&lgterms
&term	01 Feb 2001 (ah) : Start up.
&term	03 Apr 2003 (sd) : Changed ps options to match the system its running on
&term	14 Jul 2003 (sd) : changed to do better error checking
&term	12 Sep 2003 (sd) : added check for goaway file to prevent mishaps when refurbing
&term	26 May 2004 (sd) : limited the number of var log messages we capture -- bilby overflowing!
&term	19 Oct 2004 (sd) : removed ng_leader refs.
&term	06 Jun 2005 (sd) : fixed typo in family section causing this not to run
&term	02 Aug 2005 (sd) : Changed to reference rfclock in site/
&term	05 Oct 2005 (sd) : Changed tail -r call to tac call.
&term	17 Jan 2006 (sd) : Fixed bug in if statement.
&term	01 Mar 2006 (sd) : Changed some things to reduce error messages
&term	01 May 2006 (sd) : Added cd command to ensure we are back in TMP before creating tar file
&term	20 Jun 2006 (sd) : more changes to fix small complaints that tar and tac were making. Also
		altered the snagging of log messages to work on mac/sun nodes. 
&term	05 Sep 2006 (sd) : Corrected log file message listing the stats on the tar file. Added 
		selfcontained documentation. (HBD KTZ)
&term	11 Oct 2006 (sd) : Changed reference to srv_Filer. The check with the ntp server now uses
		$REFCLOCK_HOST. 
&term	20 Mar 2007 (sd) : Removed reference to Logger.
&term	12 Mar 2008 (sd) : Added repmgr df stats collection (posted in log for things like wangle).
&term	25 Sep 2008 (sd) : Corrected problem that causing nodes that did not have the usual NG_ROOT to send stats
		to the wrong directory (failing) on the collction node. 
&term	10 Oct 2008 (sd) : Corrected a typo that has prevented sending to dest node. 
&term	11 Oct 2008 (sd) : Moved collection of repmgr stats up so that if we fail on the send of the tar file
		to the stats collecfion node we still get these stats in the log.
&term	01 Dec 2008 (sd) : Corrected a typo in the construction of the remote filename.
&endterms
&scd_end
