#!/usr/bin/env ksh
# ======================================================================== v1.0/0a157 
#                                                         
#       This software is part of the AT&T Ningaui distribution 
#	
#       Copyright (c) 2001-2009 by AT&T Intellectual Property. All rights reserved
#	AT&T and the AT&T logo are trademarks of AT&T Intellectual Property.
#	
#       Ningaui software is licensed under the Common Public
#       License, Version 1.0  by AT&T Intellectual Property.
#                                                                      
#       A copy of the License is available at    
#       http://www.opensource.org/licenses/cpl1.0.txt             
#                                                                      
#       Information and Software Systems Research               
#       AT&T Labs 
#       Florham Park, NJ                            
#	
#	Send questions, comments via email to ningaui_support@research.att.com.
#	
#                                                                      
# ======================================================================== 0a229


#!/usr/bin/env ksh

#
# Mnemonic:	pp_build.ksh (narbalek version)
# Abstract: 	get a dump from pink pages and build the cartulary
#
#		NOTE: On linux, if a disk fills, redirection does not usually (ever?)
#		fail with an error.  So, in order to ensure that we did not have a 
#		disk full event, and thus a partial cartulary in the new file, we add
#		stupid little comments to the cartulary and count them.  If they are 
#		all  there, then we assume the disk did not fill on us. (very irritating)
#
# Date:		31 July 2002 -- narbalek revisions on 2 Sep 2004
# Author:	E. Scott Daniels
# -----------------------------------------------------------------------------------

if [[ -f $NG_ROOT/lib/cartulary.static ]]	# static vars that shouldnt be in pinkpages
then
	. $NG_ROOT/lib/cartulary.static
fi

if [[ -f $NG_ROOT/lib/cartulary.min ]]		# always best to have this as a base (FIRST!)
then
	. $NG_ROOT/lib/cartulary.min
fi

if [[ -f $NG_ROOT/site/cartulary.min ]]		# site specific stuff that is NOT overlaid by packages as lib/cart.min is
then
	. $NG_ROOT/site/cartulary.min
fi

CARTULARY=${NG_CARTULARY:-$NG_ROOT/cartulary}     # get standard configuration file
# do NOT pull in stdfun functions, or use ng_ cmds until we have built somesort of minimal cartulary

if [[ ! -d ${NG_ROOT:-foo}/bin ]]
then
	echo "$(date) abort: unable to validate NG_ROOT directory (${NG_ROOT:-var not set}) [FAIL]"
	exit 1
fi

# MUST be defined here!
admd=${NG_ROOT}/lib			# where we expect to find cartulary.min


# ----------------------------------------------------------------------------------------

# augment the path ($1 == PATH | LD_LIBRARY_PATH etc) with NG_ROOT/apps/$2 directories
# also validates that the directories in the list exist
function set_path
{
	typeset ad=""
	typeset p=""
	typeset q=""
	typeset np=""

	#ad=$(ls -d $NG_ROOT/apps/*/${2:-bin} 2>/dev/null)		# get all bins that are there

	# generate a RANDOM (yes random) list of bin directories to add.  We want random so people
	# do not become dependant on any particular order through the apps search path
	ad=$(ls -d $NG_ROOT/apps/*/${2:-bin} | awk 'BEGIN{ srand();} {print int(rand()*1000), $0 }' | sort | awk '{x=x $NF " "} END{print x}' )

	p=$(ng_ppget ${1:-PATH})
	if [[ -z $p ]]
	then
		log_it "abort: set_path: cannot augment a path var: unable to read ${1:-PATH} from narbalek [FAIL]"
		cleanup 1
	fi

	eval q=${p%%#*}
	for x in ${q//:/ }				# validate each directory
	do
		if [[ -d $x ]]
		then
			verbose "added dir to ${1:-PATH}:  $x  [OK]"
			np="$np$x:"
			#if [[ $x == $NG_ROOT/${2:-bin} ]]		# if we want apps to appear in front of generic stuff, uncomment these
			#then
			#	verbose "adding apps directories to path following $x"
			#	np="$np${ad// /:}"						# ad has trailing space, so we dont have to add trailing :
			#	ad=""
			#fi
			
		else
			if [[ $x != */* ]]			# probably garbage and not just a bad dir pathname 
			then
				log_it "string in ${1:-PATH} was dropped, it smells: $x [FAIL]"
			else
				log_msg "directory not found, dropped from ${1:-PATH}: $x  [WARN]"
			fi
		fi
	done

	if [[ -n $ad ]]
	then
		np="$np${ad// /:}"
		log_msg "${1:-PATH} augmented with these apps directories: $ad"
	else
		log_msg "no apps directories were found to add to ${1:-PATH}"
	fi

	eval echo \"export ${1:-PATH}=\\\"${np%:}\\\"\"		# generated by pp_build with aps"
}


# add needed things to vars as they come out of narbalek, and remove dups -- keep last one seen, 
# sort for easy reading.
function add_export
{
	typeset tfile=$TMP/ppbuild.tfile.$$
	TMPDIR=/tmp			# pp_build must use /tmp -- cannot depend on TMP being set correctly

	echo "# -------------------- indirect refs forced to end; for these to ref vars above this line, but not below -----" >$tfile
	awk -v tfile=$tfile '
		{
			if( (x = index( $0, "=" )) > 0 )
				keep[substr($0, 1, x)] = $0;
			else
				printf( "ERROR: bad record: %s\n", $0 ) >"/dev/fd/2";
		}
		END {
			for( x in keep )
			{
				if( ! index( keep[x], "$" ) )
					printf( "export %s\n", keep[x] );
				else
					printf( "export %s\n", keep[x] ) >>tfile;		# anything that is foo="$bar" we force to end
			}
		}	
	'|sort
	echo "# -------------------- end indirect referencing vars    -------------------------------------------------------" >>$tfile
	cat $tfile
	rm $tfile
}

# test the new cartulary before putting it in.  
function testit
{
	typeset x=""
	typeset rc=0
	typeset msg=""
	
	grep -c "pp_build marker" $new_cartulary | read count
	if (( $count != 2  ))
	then
		log_it "build incomplete: unexpected marker count; wanted 2 found $count [FAIL]"
		return 1				# fail -- caller will exit bad
	fi

	if ! ksh $new_cartulary  >$TMP/pp_build_err.$$ 2>&1
	then
		log_it "new cartulary failed a simple ksh source test [FAIL]"
		return 1
	else
		verbose "new cartulary passes simple ksh source test"
	fi

	rc=0
	for x in  NG_ROOT TMP PRI_ERROR PRI_CRIT NG_LOGGER_PORT NG_PARROT_PORT NG_WOOMERA_PORT
	do
		if (( $(gre -c "export $x=" $new_cartulary) < 1 ))
		then
			rc=1
			log_msg "build incomplete: cannot find $x in new cartulary [FAIL]"
		fi
	done

	if (( $rc > 0 ))
	then
		log_it "build incomplete: cannot find one or more required vars in new cartulary [FAIL]"
		return 1
	fi

	gre NG_ROOT= $new_cartulary |sed 's/^.*NG_ROOT="//; s/".*//' | read root_path
	eval root_path="$root_path"			# expand $NG_ROOT out as it does not happen in next if statement
	if [[ -d $root_path/bin ]]
	then
		verbose "NG_ROOT ($root_path) in cartulary seems good"
	else
		log_it "variable NG_ROOT ($root_path) in new cartulary smells [FAIL]"
		return 1
	fi

	gre TMP= $new_cartulary |sed 's/^.*TMP="//; s/".*//' | read tmp_path
	eval tmp_path="$tmp_path"			# expand $NG_ROOT out as it does not happen in next if statement
	if [[ -d $tmp_path ]]
	then
		verbose "TMP ($tmp_path) in cartulary seems good"
	else
		log_it "TMP ($tmp_path) in new cartulary smells [FAIL]"
		return 1
	fi

	# make sure it parses cleanly and that we can find needed things via PATH 
	(
		set -e
		. $new_cartulary

		for p in ng_dt ls 
		do
			if ! whence $p >/dev/null
			then
				echo "unable to find $p via PATH ($PATH)"
				exit 1
			fi
		done
	)
	rc=$?
	if (( $rc != 0 ))
	then
		log_it "new cartulary did not parse, or PATH did not reference needed bin directories [FAIL]"
		return 1
	fi
		
	return 0
}


# prevent us from getting bit by anything that existed in the environment 
function wash_env
{
	env | grep ${1:-NG_} | while read x
	do
		unset ${x%%=*}
	done
}

# this allows pp_build to be run as soon as software is installed, and minimal 
# diriectories are created, but before any other processes are started (most need 
# cartulary info to go)
#
# do NOT use stdfun funcitons until its pulled in later (after carutlary is established)
#
# If cartulary seems bogus (missing or short) then create a minimal one and go with it
# we get NG_CLUSTER from a narbalek and add it to the min cartulary
function validate_cartulary
{
	if [[ ! -s $CARTULARY ]] || ! gre -c "marker.*end of" $CARTULARY >/dev/null		# if it does not exist, or seems truncated
	then
		ng_root=$NG_ROOT	# MUST preserve this one
		wash_env NG_		# clear the environment of lingering things
		wash_env srv_
		wash_env RM_
		wash_env LOG_
		export NG_ROOT=$ng_root	# restore
	
		ls -al $CARTULARY >&2 2>/dev/null
		echo  "cartuary non-existant, empty or truncated; creating a minimal one" >&2
	
		if [[ -r $admd/cartulary.min ]]		# need at least a minimum of info (path, LD_LIB, important ports, etc)
		then
			. $admd/cartulary.min 			# this MUST have ng_narbalek_port
			if ! cp $admd/cartulary.min $CARTULARY
			then
				echo "panic: could not copy minimal cartulary to $CARTULARY" >&2
				exit 3
			fi
			if [[ -r $NG_ROOT/site/cartulary.min ]]
			then
				. $NG_ROOT/site/cartulary.min 	# site specific overrides/additions to cartulary.min
				if ! cat $NG_ROOT/site/cartulary.min >>$CARTULARY
				then
					echo "panic: could not add site/cartulary.min info to $CARTULARY"
					exit 4
				fi
			fi
	
			chmod 775 $CARTULARY 2>/dev/null
			ng_sysname -s | read myhost
	
			# we cannot function without NG_CLUSTER and it is only in narbalek... ask local narbalek and if that fails 
			# find a remote narbalek and try them.
			#
			echo "get pinkpages/$myhost:NG_CLUSTER" | ng_sendtcp -e "#end#" $myhost:${NG_NARBALEK_PORT:-5555} |read NG_CLUSTER
	
			if [[ -z $NG_CLUSTER ]]		# ours is down, or for odd reasons did not have the answer, try random host
			then
				echo "NG_CLUSTER not returned by local narbalek; searching for a boot-strap narbalek (5 sec delay)" >&2
				ng_nar_get -t 5 -b bootstrap_node | read boot_host
				echo "get pinkpages/$myhost:NG_CLUSTER" | ng_sendtcp -e "#end#" $boot_host:${NG_NARBALEK_PORT:-5555} |read NG_CLUSTER
	
				if [[ -z $NG_CLUSTER ]]
				then
					echo "panic: cannot find pinkpages/$myhost:NG_CLUSTER in narbalek" >&2
					exit 2
				fi
			fi
		else
			echo "abort: cannot find $admd/cartulary.min [FAIL]" >&2
			exit 1
		fi
	
		export NG_CLUSTER		
		echo "export NG_CLUSTER=$NG_CLUSTER  # set by pp_build " >>$CARTULARY
		echo "cluster from narbalek for pinkpages/$myhost is: $NG_CLUSTER" >&2
	fi				
}

# generate a message to both stderr and the masterlog. masterlog messages default to 
# critical so they are noticed
function log_it
{
	log_msg "new cartulary not installed: $@ [FAIL]"
	ng_log $error_level $argv0 "new cartulary not built or installed: $@"
}

# ------------------- end functions -----------------------------------------------


validate_cartulary		# if its trash, or missing, build a minimal one
. $CARTULARY			# and source what we now think is a good cartulary

if [[ -z $NG_CLUSTER ]] 			# though it could be crap if NG_CLUSTER is missing
then
	echo "cartulary was bad -- no NG_CLUSTER; moving off and trying with minimal"
	ng_rename $NG_ROOT/cartulary $NG_ROOT/cartulary.smells
	validate_cartulary				# will wash potentially bad vars 
	. $CARTULARY					# reload after attempt to rebuild

	if [[ -z $NG_CLUSTER ]] 			# if it is still missing, then something is really hosed (narbalek down?) 
	then
		log_it "panic:  NG_CLUSTER variable is missing; cannot continue"
		cleanup 4
	fi
fi


# now safe to use scripts that can function with just a minimal cartulary in place (pp and nar scripts)
STDFUN=${NG_STDFUN:-$NG_ROOT/lib/stdfun}  # get standard functions
. $STDFUN

# -------------------------------------------------------------------
ustring="[-n] [-p port] [-r] [-s host] [-v]"

verbose=0
port=$NG_NARBALEK_PORT			# default port number
ng_sysname -s | read myhost
host="$myhost"
test=0
error_level=$PRI_CRIT			# -q turns these off

TMP=${TMP:-/tmp}			# we must be able to run even if TMP is not set
if [[ ! -d $TMP ]]
then
	TMP=/tmp
	ng_log $PRI_INFO $argv0 "switching to /tmp; TMP ($TMP) not set or not a directory"
fi

while [[ $1 == -* ]]
do
	case $1 in
		-n)	test=1
			CARTULARY=$TMP/cartulary_TEST
			;;
		-p)	port=$2; shift;;
		-r)	;;				# deprecated
		-s)	host=$2; shift;;		# host to get dump from 
		-q)	error_level=$PRI_ERROR;;
		-v)	verbose=1
			v="$v-v "
			;;

		--man)	show_man; cleanup 1;;
		-\?)	usage; cleanup 1;;
		-*)	error_msg "unrecognised option: $1"
			usage;
			cleanup 1
			;;
	esac

	shift
done

new_cartulary=$CARTULARY.new.$$

if [[ -z $port ]]
then
	log_it "unable to find cartulary/env variable: NG_NARBALEK_PORT"
	cleanup 1
else
	verbose "sending to $host:$port"
fi


ng_dt -c | read now

if [[ -f $NG_ROOT/lib/cartulary.static ]]
then
	cat $NG_ROOT/lib/cartulary.static >$new_cartulary		# always start with static things
fi

# path from minimal cartulary is put in to ensure that one exists.  some how, 
# a chopped cartulary can be created and buggers an auto rebuild if there is 
# no PATH setting

grep "export PATH=" $admd/cartulary.min | sed "s|\\\$NG_ROOT|$NG_ROOT|" >>$new_cartulary	

cat <<endKat >>$new_cartulary
# $now
# cartulary created by $argv0 from pinkpages data stored in narbalek
# -----------------------------------------------------------
# WARNING:
#	DO NOT edit this file.  Changes can be submitted to 
#	pinkpages using ppset, and will be captured and placed
#	into the cartulary on all cluster nodes with the next 
#	execution of ng_rota (5 min or less).
#
#	Variables are extracted from pinkpages (as stored in narbalek)
#	and the order presetented by narbalek is random; thus 
#	the variables are sorted.  Only refrences to $NG_ROOT
#	are expanded.  Any variable value containing a 
#	variable refrence (e.g. NG_TMP_FOO="$TMP/foo") will be 
#	placed at the end of the variables that have no references
#	in an effort to allow them to expand properly when this file
#	is sourced.  
#
# -------------------------------------------------------------
# pp_build marker		(these are counted as a part of the verification that new cart was created ok)
endKat

cart_dump_base=$NG_ROOT/pp_build.dump 			# do NOT put this in $TMP
cart_dump=$cart_dump_base.$$

set -o pipefail
if ! ng_ppget -r -p $port -s $host | add_export >$cart_dump	# ppget dumps in flock, cluster, node order; add_ex filters off dups and sorts
then								# ppget uses nar_get which validates end of table messages for us now
	error_level=$PRI_ERROR	# we expect narbalek to stiff us, or give #ERROR# if it is disconnected; these are just errors not crits
	log_it "generation of data failed see: $TMP/log/pp_build.dump.$$.failed"
	rm -f $new_cartulary
	mv $cart_dump $TMP/log/pp_build.dump.$$.failed
	cleanup 1
fi

if [[ ! -s $cart_dump ]]
then
	log_it "cartulary dump from $host:$port was empty"
	rm -f $new_cartulary 
	rm -f $cart_dump
	cleanup 1
fi



if ! cat $cart_dump >>$new_cartulary		# add pinkpages stuff (this does not fail on linux if disk fills up!)
then
	log_it "unable to cat $cart_dump into $new_cartulary [FAIL]"
	rm -f $new_cartulary
	ng_rename $cart_dump $cart_dump_base.failed
	chown ${NG_PROD_ID:-ningaui}:${NG_PROD_ID:-ningaui} $cart_dump_base.failed 2>/dev/null 		# prevents leaving owned by root 
	
	cleanup 1
fi

rm -f $cart_dump

echo "# pp_build marker	end of dump" >>$new_cartulary			# we count these later to see if there were disk issues

echo "# ---- vars agumented by pp_build ------------------------------------------------------------------------" >>$new_cartulary
set_path PATH bin >>$new_cartulary		# agument path with stuff from apps
set_path LD_LIBRARY_PATH lib >>$new_cartulary		
set_path DYLD_LIBRARY_PATH lib >>$new_cartulary	
set_path RUBYLIB lib >>$new_cartulary



if ! testit				# ensure the new one can at least be parsed
then
	log_it "new cartulary was not sane, it was NOT installed [FAIL]"
	if [[ ! -d $TMP/billabong/misc ]]
	then
		mkdir -p $TMP/billabong/misc
	fi
	bname="$TMP/billabong/misc/cartulary.failed.$(ng_dt -i)"
	cat $new_cartulary >$bname
	log_msg "bad cartulary might have been saved in $bname"

	rm -f $new_cartulary
	cleanup 1			# all errors 
fi
verbose "new cartulary passed inspection"


rm -f $CARTULARY- 2>/dev/null
cp $CARTULARY $CARTULARY-		# back it off
x=$(ng_nar_map -c)			# get a list of all clusters 
if [[ -n $x ]]
then
	echo "export FLOCK_MEMBERS=\"$x\"" >>$new_cartulary
fi
echo "# $(ng_dt -i) $(ng_dt -p) $0 generated file" >>$new_cartulary  # for spyglass stale check

ng_rename $new_cartulary $CARTULARY
chmod 775 $CARTULARY 2>/dev/null
rm -f $new_cartulary

cleanup 0


/* ---------- SCD: Self Contained Documentation ------------------- 
&scd_start
&doc_title(ng_pp_build:Pink Pages - build the cartulary)

&space
&synop	ng_pp_build [-n] [-p port] [-s host] [-v]

&space
&desc	&This requests a complete dump of &ital(pinkpages) data from &ital(narbalek) 
	and rebuilds the cartulary with the information that returned. The cartulary is 
	not overlaid if narbalek does not return an end of table message, or if 
	it is not possible to establish communications with narbalek at all.
&space
	&ital(Pinkpages) data is maintained in &ital(narbalek) as a three level
	namespace table of name/value pairs.  &This requests each namespace and 
	places them into the cartulary in the order returned. The name spaces 
	are &lit(flock) for flock wide variables, &ital(cluster-name) for cluster
	wide variables, and &ital(node-name) for local (node specific) values. 


&space
&subcat Error Recovery
	In genearal, &this is executed every few minutes by &lit(ng_rota) in order 
	to keep the cartulary fresh.  Should the cartulary become corrupted the normal
	rebuild should correct the problem automatically.  It is unlikely that &this
	will be affected by a corrupted cartulary, but should it be,  the method to 
	resolve the problem is to remove the cartulary ($NG_ROOT/cartulary) and then 
	execute &this. 
	
&space
&opts	The following options are recognised by &this when placed on the command line:
&begterms
&term	-n : No execution. The cartulary is built and placed in the $TMP directory as
	cartulary_TEST. 
&space
&term	-p port : Allows &this to send the message to a parrot process not listening
	on the standard port. 
&space
&term	-r : Causes the value of &lit(NG_ROOT) to be sent to pinkpages as the alternate
	root value to use when expanding variables. 
&space
&term	-s host : Uses the ng_narbalek process on &ital(host) to get a dump.  
&space
&term	-v : Verbose mode.
&endterms

&space
&exit	A zero return code inidcates that this script finished successfully. A non-zero 
	return code signifies that an error occurred.

&space
&see	ng_ppget, ng_ppset, ng_pinkpages, ng_pp_start, ng_pp_bootstrap

&space
&mods
&owner(Scott Daniels)
&lgterms
&term	09 Mar 2003 (sd) : The orignal stuff.
&term	21 Mar 2003 (sd) : Mod to use cartulary.local.
&term	03 Jun 2003 (sd) : corrected a bug in the initialisation when no cartulary.
&term	01 Aug 2003 (sd) : Added ability to send alternate NG_ROOT.
&term	11 Aug 2003 (sd) : Added wash_env funciton to clear environment if no carutlary exists.
&term	20 Aug 2003 (sd) : Now creates the pinkpages dump file on the same disk as /ning/cartulary
	so that we easily detect a disk full issue.
&term	02 Sep 2003 (sd) : Revamped doc a bit.
&term	12 Sep 2003 (sd) : Added solo call to ensure that we execute only one at a time.
&term	05 Jan 2004 (sd) : Started conversion to use $NG_ROOT/site rather than adm.
&term	31 Mar 2004 (sd) : Now tests cartulary by sourcing the new one.  
&term	09 Aug 2004 (sd) : Will rebuild a truncated cartulary.  Ensures that the PATH from the minimal 
	cartulary is placed into the cartulary (at top) so that if the cartulary is truncated
	ng_rota and ng_pp_build can function to rebulid the cartulary.
&term	02 Sep 2004 (sd) : upgrade for narbalek.
&term	13 Oct 2004 (sd) : Added pid to new cartulary file while its being created.
&term	21 Jan 2005 (sd) : Now deletes the new cartulary in every case that it aborts.
&term	05 Feb 2005 (sd) : Added one more attempt to build the cartulary from a minimal version if 
		it appears to be hosed.
&term	25 Mar 2005 (sd) : Reset owner on cart_dump file -- root was ending up with ownership after some 
		failures during boot process.
&term	23 Apr 2005 (sd) : Fixed last place where dump file was not being cleaned up.
&term	02 May 2005 (sd) : Added some sanity checking for NG_ROOT, TMP to better ensure good dump from narbalek.
&term	14 Jul 2005 (sd) : Now augments path with $NG_ROOT/apps/*/bin directories. 
&term	12 Aug 2005 (sd) : Added one more check to verification -- tests to endure NG_ROOT and 
	TMP are defined and are real directories.
&term	15 Dec 2005 (sd) : Tests to see if NG_ROOT in the new cartulary is a legit directory and to validate 
	PATH that is returned from narbalek.
&term	22 Dec 2005 (sd) : Fixed  NG_ROOT directory verification such that 
&term	04 Jan 2006 (sd) : Fixed verification of path elements; no longer barfs if the directory is bad and 
		looks like a directory.  Now generates FLOCK_MEMBERS into cartulary after a successful build.
&term	15 Feb 2006 (sd) : Checks the NG_ROOT as being valid using NG_ROOT/bin since /ningaui exists on all nodes
		but may not be the root.  We have had issues with narbalek giving us /ningaui as ROOT and that 
		validating because the directory exists. 
&term	31 Mar 2006 (sd) : Added check to validate NG_ROOT is set correctly in environment when this is invoked.
&term	04 May 2006 (sd) : Corrected temp file name.
&term	21 Jun 2006 (sd) : Now puts variables whose values reference other variables at the end of the 
		cartulary. Attempt is to allow them to properly expand, but double indirection will still 
		result in unplanned behaviour. 
&term	23 Jun 2006 (sd) : Now forces sort to use /tmp -- cannot depend on $TMP to be right in this script.
		Also verifies that $TMP is a legit directory and uses /tmp if not.
&term	25 Jul 2006 (sd) : Fixed problem with adding apps directories to PATH.
&term	09 Aug 2006 (sd) : Converted to use ng_rename for atomic renames. 
&term	25 Sep 2007 (sd) : Ensured that all faiure situations generate a critical error into the masterlog.
&term	08 Oct 2007 (sd) : Corrected copy of dump file to $TMP on failure.
&term	09 Oct 2007 (sd) : If we fail because we did not get info from narbalek, a common occurance when it is 
		reconnecting to its comm tree, we now generate an ERROR to the master log rather than 
		a CRIT. 
&term	15 Oct 2007 (sd) : Modified to use NG_PROD_ID rather than assuming it is ningaui.
&term	16 Oct 2007 (sd) : Now suppresses an error from ls if there are not any apps directories to add to the path.
&term	05 Ded 2007 (sd) : Added code to allow LD_LIBRARY_PATH and DYLD_LIBRARY_PATH to be augmented with apps/*/lib directories
		as is done with PATH.  New vars are placed at the end of the cartulary so they override those that 
		were generated from pinkpages. 
&term	29 Jul 2008 (sd) : We now generate the search path though apps directories in random order (so that nobody becomes
		dependant on ordering).
&term	03 Sep 2008 (sd) : Modified set_path (again) to add application directories at the end of the path rather than 
		immediately after NG_ROOT/whatever. 
&term	10 Oct 2008 (sd) : Fixed a broken reference to the ng_root directory in adding apps/*/bin and apps/*/lib directories to 
		resepective paths. 
&term	16 Oct 2008 (sd) : Added yet more attempts to ensure that the cartulary is 100% pristine before installing it. 
&term	11 Nov 2008 (sd) : Corrected two log messages that were not writing crits to the master log when the script aborted.
&term	01 Dec 2008 (sd) : Added another diagnositic to help when dealing with system shortcomings.
&term	05 Jan 2009 (sd) : Date/time added at end of file so spyglass can verify the freshness of the file; cannot depend on 
		the filesystem timestamp as we can cause it to be updated even if the file is not modified.
&term	18 Jan 2009 (sd) : Added a bit to the diagnostic announcing that PATH did not yield a needed binary.
&endterms

&scd_end
------------------------------------------------------------------ */
